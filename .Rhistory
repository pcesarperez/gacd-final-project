labeledData <- data.table (merge (data,
activityLabels,
by.x=ACTIVITY_COL_NAME,
by.y=ACTIVITY_ID_COL_NAME,
all=TRUE,
sort=FALSE))
View(labeledData)
data$subject
data [SUBJECT_COL_NAME]
labeledData [SUBJECT_COL_NAME]
?merge
class (data)
test <- loadTestDataSet (featureNames)
train <- loadTrainDataSet (featureNames)
class (test)
class (train)
test <- data.table (test)
train <- data.table (train)
test
View(test)
test$subject
test ["subject"]
setkeyv (test, c ("subject", "activity"))
test ["subject"]
class (test$subject)
test [, get ("subject")]
test [, get (SUBJECT_COL_NAME)]
source('Z:/Documents/Cursos/Coursera/Getting and Cleaning Data/Assignment/gacd-final-project/run_analysis.R', echo=TRUE)
## ----------------------------------------------------------------------------
## Gets the feature names for the analysis.
##
## @return A character vector with the feature names for the analysis.
getFeatureNames <- function ( ) {
featureNames <- read.table (getFeatureNamesPath ( ), col.names=c (FEATURE_ID_COL_NAME, FEATURE_NAME_COL_NAME))
return (as.character (featureNames [, FEATURE_NAME_COL_NAME]))
}
## Gets the activity labels of each activity performed in the experiment.
## Each activity has an index used in both the test and train data sets.
##
## @return A data table containing the index of each activity and its label.
getActivityLabels <- function ( ) {
activityLabels <- read.table (getActivityLabelsPath ( ),
col.names=c (ACTIVITY_ID_COL_NAME, ACTIVITY_LABEL_COL_NAME),
stringsAsFactors=FALSE)
return (data.table (activityLabels))
}
## Load the test data set, returning a data table with three data files clipped together.
## The data files are:
##
## * `subject_test.txt`: Identifies the subject of each observation.
## * `y_test.txt`: Identifies the activity of each observation.
## * `x_test.txt`: Observations for each subject performing a certain activity.
##
## @param featureNames A vector with the feature names for the analysis.
## @return A data table with the data of the three files clipped together.
loadTestDataSet <- function (featureNames) {
subjects <- read.table (getTestSubjectsPath ( ), col.names=SUBJECT_COL_NAME)
activities <- read.table (getTestActivitiesPath ( ), col.names=ACTIVITY_COL_NAME)
features <- read.table (getTestFeaturesPath ( ), col.names=featureNames)
return (cbind (subjects, activities, features))
}
## Load the train data set, returning a data table with three data files clipped together.
## The data files are:
##
## * `subject_train.txt`: Identifies the subject of each observation.
## * `y_train.txt`: Identifies the activity of each observation.
## * `x_train.txt`: Observations for each subject performing a certain activity.
##
## @param featureNames A vector with the feature names for the analysis.
## @return A data table with the data of the three files clipped together.
loadTrainDataSet <- function (featureNames) {
subjects <- read.table (getTrainSubjectsPath ( ), col.names=SUBJECT_COL_NAME)
activities <- read.table (getTrainActivitiesPath ( ), col.names=ACTIVITY_COL_NAME)
features <- read.table (getTrainFeaturesPath ( ), col.names=featureNames)
return (cbind (subjects, activities, features))
}
## Merges the test and train data sets.
## The subjects of each data set are different, so we have to join the data tables together.
##
## @param test Test data set.
## @param train Train data set.
## @return A data set combining the test and train data sets.
mergeDataSets <- function (test, train) {
return (rbind (test, train))
}
## Extracts the measurements on the mean and standard deviation for each observation.
## That means removing the columns not related to these two measures.
##
## @param data A data set with the combination of the test and train data sets.
## @param filteredFeatureNames A character vector containing the feature names related to mean and standard deviation.
## @return A data set with all columns removed, except subject, activity and mean/standard deviation related columns.
extractMeanStdMeasurements <- function (data, filteredFeatureNames) {
return (data [, c (SUBJECT_COL_NAME, ACTIVITY_COL_NAME, filteredFeatureNames)])
}
## Replaces the activity ids in the data set for their labels.
##
## @param data A data set with the combination of the test and train data sets.
## @param activityLabels A data table with the correspondence between the activity ids and their labels.
## @param filteredFeatureNames A character vector containing the the feature names related to mean and standard deviation.
## @return A data set with the values in the column "activity" replaced by proper labels.
replaceActivityIdByLabel <- function (data, activityLabels, filteredFeatureNames) {
# 1. Adds a new columns with the activity label of each observation.
labeledData <- data.table (merge (data,
activityLabels,
by.x=ACTIVITY_COL_NAME,
by.y=ACTIVITY_ID_COL_NAME,
all=TRUE,
sort=FALSE))
# 3. Converts the column with activity labels to a character vector.
# 2. Removes the column with the activity ids.
# See: http://stackoverflow.com/questions/9202413/how-do-you-delete-a-column-in-data-table
labeledData <- labeledData [, which (!grepl (ACTIVITY_COL_NAME, colnames (labeledData))), with=FALSE]
# 4. Reordesr the columns to put the activity label next to the subject id.
setcolorder (labeledData, c (SUBJECT_COL_NAME, ACTIVITY_LABEL_COL_NAME, filteredFeatureNames))
# 5. Gets the data table with the activity labels.
return (labeledData)
}
## Main function.
source('Z:/Documents/Cursos/Coursera/Getting and Cleaning Data/Assignment/gacd-final-project/run_analysis.R', echo=TRUE)
featureNames <- getFeatureNames ( )
class (featureNames)
activityLabels <- getActivityLabels ( )
class (activityLabels)
activityLabels <- read.table (getActivityLabelsPath ( ), col.names= c (ACTIVITY_ID_COL_NAME, ACTIVITY_LABEL_COL_NAME), stringsAsFactors=FALSE)
activityLabels
activityLabels <- data.table (activityLabels)
activityLabels
class (activityLabels)
activityLabels [ACTIVITY_ID_COL_NAME]
activityLabels [, get (ACTIVITY_ID_COL_NAME)]
activityLabels [, get (ACTIVITY_LABEL_COL_NAME)]
source('Z:/Documents/Cursos/Coursera/Getting and Cleaning Data/Assignment/gacd-final-project/run_analysis.R', echo=TRUE)
test <- loadTestDataSet (featureNames)
train <- loadTrainDataSet (featureNames)
View(test)
test ["subject"]
data <- rbind (test, train)
class (data)
data ["subject"]
data [get ("subject")]
data [, get ("subject")]
unique (data [, get ("subject")])
length (unique (data [, get ("subject")]))
filteredFeatureNames <- replaceOffendingCharacters (filterFeatureNamesByMeanAndStd (featureNames))
filteredFeatureNames
data <- extractMeanStdMeasurements (data, filteredFeatureNames)
class (data)
data <- rbind (test, train)
View(data)
data [, "subject"]
data [, get ("subject")]
data [, get (filteredFeatureNames)]
colnames (data [, get (filteredFeatureNames)])
class (data)
test <- loadTestDataSet (featureNames)
class (test)
View(test)
test [SUBJECT_COL_NAME]
source('Z:/Documents/Cursos/Coursera/Getting and Cleaning Data/Assignment/gacd-final-project/run_analysis.R', echo=TRUE)
test <- loadTestDataSet
test <- loadTestDataSet ( )
class (test)
test [SUBJECT_COL_NAME]
train <- loadTrainDataSet (featureNames)
View(test)
View (train)
data <- mergeDataSets (test, train)
test <- loadTestDataSet (featureNames)
data <- mergeDataSets (test, train)
View (data)
filteredFeatureNames <- replaceOffendingCharacters (filterFeatureNamesByMeanAndStd (featureNames))
data <- extractMeanStdMeasurements (data, filteredFeatureNames)
View(data)
rm (labeledData)
labeledData <- (merge (data,
activityLabels,
by.x=ACTIVITY_COL_NAME,
by.y=ACTIVITY_ID_COL_NAME,
all=TRUE,
sort=FALSE))
class (labeledData)
View(labeledData)
labeledData [ACTIVITY_COL_NAME] <- NULL
View(labeledData)
setcolorder (labeledData, c (SUBJECT_COL_NAME, ACTIVITY_LABEL_COL_NAME, filteredFeatureNames))
labeledData <-  labeledData [c (SUBJECT_COL_NAME, ACTIVITY_LABEL_COL_NAME, filteredFeatureNames)]
View(labeledData)
class (labeledData [ACTIVITY_LABEL_COL_NAME])
labeledData [ACTIVITY_LABEL_COL_NAME] <- as.character (labeledData [ACTIVITY_LABEL_COL_NAME])
View(labeledData)
rm (labeledData)
data <- replaceActivityIdByLabel (data, activityLabels, filteredFeatureNames)
source('Z:/Documents/Cursos/Coursera/Getting and Cleaning Data/Assignment/gacd-final-project/run_analysis.R', echo=TRUE)
data <- replaceActivityIdByLabel (data, activityLabels, filteredFeatureNames)
View(data)
filteredFeatureNames
colnames (data)
newColNames <- colnames (data)
newColNames
data [SUBJECT_COL_NAME]
colnames (data)
(colnames (data)) [2:]
(colnames (data)) [2]
(colnames (data)) [2:lecth (colnames (data))]
(colnames (data)) [2:length (colnames (data))]
colnames (data)
(colnames (data)) [SUBJECT_COL_NAME]
(colnames (data)) [1]
(colnames (data)) [1] <- "subject.id"
(colnames (data)) [1] <- "subject.id"
colnames (data) [1]
colnames (data) [1] <- "subject.id"
View(data)
?gsub
gsub ("^t", "time.", colnames (data))
colnames (data) <- gsub ("^t", "time.", colnames (data))
View(data)
colnames (data) <- gsub ("Body", "body.", colnames (data))
View(data)
colnames (data) <- gsub ("Acc", "acceleration.", colnames (date))
View(data)
data <- mergeDataSets (test, train)
filteredFeatureNames <- replaceOffendingCharacters (filterFeatureNamesByMeanAndStd (featureNames))
data <- extractMeanStdMeasurements (data, filteredFeatureNames)
data <- replaceActivityIdByLabel (data, activityLabels, filteredFeatureNames)
cat (" Done.\n")
data <- replaceActivityIdByLabel (data, activityLabels, filteredFeatureNames)
View(data)
data <- mergeDataSets (test, train)
filteredFeatureNames <- replaceOffendingCharacters (filterFeatureNamesByMeanAndStd (featureNames))
data <- extractMeanStdMeasurements (data, filteredFeatureNames)
View(data)
source('Z:/Documents/Cursos/Coursera/Getting and Cleaning Data/Assignment/gacd-final-project/run_analysis.R', echo=TRUE)
data <- replaceActivityIdByLabel (data, activityLabels, filteredFeatureNames)
View(data)
data <- assignDescriptiveVariableNames (data)
source('Z:/Documents/Cursos/Coursera/Getting and Cleaning Data/Assignment/gacd-final-project/run_analysis.R', echo=TRUE)
cat ("  Merging the test and train data sets...")
data <- mergeDataSets (test, train)
cat (" Done.\n")
cat ("  Extracting mean and standard deviation related features...")
filteredFeatureNames <- replaceOffendingCharacters (filterFeatureNamesByMeanAndStd (featureNames))
data <- extractMeanStdMeasurements (data, filteredFeatureNames)
cat (" Done.\n")
cat ("  Replacing the activity ids by their corresponding labels...")
data <- replaceActivityIdByLabel (data, activityLabels, filteredFeatureNames)
cat (" Done.\n")
View(data)
data <- assignDescriptiveVariableNames (data)
data <- mergeDataSets (test, train)
cat (" Done.\n")
cat ("  Extracting mean and standard deviation related features...")
filteredFeatureNames <- replaceOffendingCharacters (filterFeatureNamesByMeanAndStd (featureNames))
data <- extractMeanStdMeasurements (data, filteredFeatureNames)
cat (" Done.\n")
cat ("  Replacing the activity ids by their corresponding labels...")
data <- replaceActivityIdByLabel (data, activityLabels, filteredFeatureNames)
cat (" Done.\n")
source('Z:/Documents/Cursos/Coursera/Getting and Cleaning Data/Assignment/gacd-final-project/run_analysis.R', echo=TRUE)
data <- assignDescriptiveVariableNames (data)
View(data)
source('Z:/Documents/Cursos/Coursera/Getting and Cleaning Data/Assignment/gacd-final-project/run_analysis.R', echo=TRUE)
## ----------------------------------------------------------------------------
## Gets the feature names for the analysis.
##
## @return A character vector with the feature names for the analysis.
getFeatureNames <- function ( ) {
featureNames <- read.table (getFeatureNamesPath ( ), col.names=c (FEATURE_ID_COL_NAME, FEATURE_NAME_COL_NAME))
return (as.character (featureNames [, FEATURE_NAME_COL_NAME]))
}
## Gets the activity labels of each activity performed in the experiment.
## Each activity has an index used in both the test and train data sets.
##
## @return A data table containing the index of each activity and its label.
getActivityLabels <- function ( ) {
activityLabels <- read.table (getActivityLabelsPath ( ),
col.names=c (ACTIVITY_ID_COL_NAME, ACTIVITY_LABEL_COL_NAME),
stringsAsFactors=FALSE)
return (data.table (activityLabels))
}
## Load the test data set, returning a data table with three data files clipped together.
## The data files are:
##
## * `subject_test.txt`: Identifies the subject of each observation.
## * `y_test.txt`: Identifies the activity of each observation.
## * `x_test.txt`: Observations for each subject performing a certain activity.
##
## @param featureNames A vector with the feature names for the analysis.
## @return A data table with the data of the three files clipped together.
loadTestDataSet <- function (featureNames) {
subjects <- read.table (getTestSubjectsPath ( ), col.names=SUBJECT_COL_NAME)
activities <- read.table (getTestActivitiesPath ( ), col.names=ACTIVITY_COL_NAME)
features <- read.table (getTestFeaturesPath ( ), col.names=featureNames)
return (cbind (subjects, activities, features))
}
## Load the train data set, returning a data table with three data files clipped together.
## The data files are:
##
## * `subject_train.txt`: Identifies the subject of each observation.
## * `y_train.txt`: Identifies the activity of each observation.
## * `x_train.txt`: Observations for each subject performing a certain activity.
##
## @param featureNames A vector with the feature names for the analysis.
## @return A data table with the data of the three files clipped together.
loadTrainDataSet <- function (featureNames) {
subjects <- read.table (getTrainSubjectsPath ( ), col.names=SUBJECT_COL_NAME)
activities <- read.table (getTrainActivitiesPath ( ), col.names=ACTIVITY_COL_NAME)
features <- read.table (getTrainFeaturesPath ( ), col.names=featureNames)
return (cbind (subjects, activities, features))
}
## Merges the test and train data sets.
## The subjects of each data set are different, so we have to join the data tables together.
##
## @param test Test data set.
## @param train Train data set.
## @return A data set combining the test and train data sets.
mergeDataSets <- function (test, train) {
return (rbind (test, train))
}
## Extracts the measurements on the mean and standard deviation for each observation.
## That means removing the columns not related to these two measures.
##
## @param data A data set with the combination of the test and train data sets.
## @param filteredFeatureNames A character vector containing the feature names related to mean and standard deviation.
## @return A data set with all columns removed, except subject, activity and mean/standard deviation related columns.
extractMeanStdMeasurements <- function (data, filteredFeatureNames) {
return (data [, c (SUBJECT_COL_NAME, ACTIVITY_COL_NAME, filteredFeatureNames)])
}
## Replaces the activity ids in the data set for their labels.
##
## @param data A data set with the combination of the test and train data sets.
## @param activityLabels A data table with the correspondence between the activity ids and their labels.
## @param filteredFeatureNames A character vector containing the the feature names related to mean and standard deviation.
## @return A data set with the values in the column "activity" replaced by proper labels.
replaceActivityIdByLabel <- function (data, activityLabels, filteredFeatureNames) {
# 1. Adds a new columns with the activity label of each observation.
labeledData <- (merge (data,
activityLabels,
by.x=ACTIVITY_COL_NAME,
by.y=ACTIVITY_ID_COL_NAME,
all=TRUE,
sort=FALSE))
# 2. Removes the column with the activity ids.
labeledData [ACTIVITY_COL_NAME] <- NULL
# 3. Reorders the columns to put the activity label next to the subject id.
labeledData <-  labeledData [c (SUBJECT_COL_NAME, ACTIVITY_LABEL_COL_NAME, filteredFeatureNames)]
# 4. Gets the data set with the activity labels.
return (labeledData)
}
## Assigns descriptive variable names to the data set.
## A descriptive name is made of strings concatenated with a dot (".") character.
## For example, "tBodyAcc.std...X" is replaced with "time.body.acceleration.std.x".
## The general conversion rules are:
##
## * All feature names will be in lowercase.
## * The individual parts of the feature will be separated by a dot (".").
## * "t", at the beginning of the name, is replaced by "time".
## * "f", at the beginning of the name, is replaced by "frequency".
## * "Acc" is replaced by "accelerometer".
## * "Gyro" is replaced by "gyroscope".
## * "Jerk" is replaced by "shake".
## * "Mag" is replaced by "magnitude".
## * "std" remains the same.
## * "mean" remains the same.
## * "Body" is replaced by "body".
##
## @param data A data set with the combination of the test and train data sets.
## @return The data set with descriptive variable names.
assignDescriptiveVariableNames <- function (data) {
# The subject column is a direct change.
colnames (data) [1] <- SUBJECT_ID_COL_NAME
# "t" => "time."
colnames (data) <- gsub ("^t", "time.", colnames (data))
# "Body" => "body."
colnames (data) <- gsub ("Body", "body.", colnames (data))
# "Acc" => "acceleration."
colnames (data) <- gsub ("Acc", "acceleration.", colnames (data))
return (data)
}
## Main function.
source('Z:/Documents/Cursos/Coursera/Getting and Cleaning Data/Assignment/gacd-final-project/run_analysis.R', echo=TRUE)
data <- assignDescriptiveVariableNames (data)
data
View(data)
source('Z:/Documents/Cursos/Coursera/Getting and Cleaning Data/Assignment/gacd-final-project/run_analysis.R', echo=TRUE)
data <- assignDescriptiveVariableNames (data)
View(data)
data <- mergeDataSets (test, train)
cat (" Done.\n")
cat ("  Extracting mean and standard deviation related features...")
filteredFeatureNames <- replaceOffendingCharacters (filterFeatureNamesByMeanAndStd (featureNames))
data <- extractMeanStdMeasurements (data, filteredFeatureNames)
cat (" Done.\n")
cat ("  Replacing the activity ids by their corresponding labels...")
data <- replaceActivityIdByLabel (data, activityLabels, filteredFeatureNames)
cat (" Done.\n")
data <- assignDescriptiveVariableNames (data)
View(data)
colnames (data)
data <- mergeDataSets (test, train)
cat (" Done.\n")
cat ("  Extracting mean and standard deviation related features...")
filteredFeatureNames <- replaceOffendingCharacters (filterFeatureNamesByMeanAndStd (featureNames))
data <- extractMeanStdMeasurements (data, filteredFeatureNames)
cat (" Done.\n")
cat ("  Replacing the activity ids by their corresponding labels...")
data <- replaceActivityIdByLabel (data, activityLabels, filteredFeatureNames)
cat (" Done.\n")
data <- assignDescriptiveVariableNames (data)
View(data)
colnames (data)
source('Z:/Documents/Cursos/Coursera/Getting and Cleaning Data/Assignment/gacd-final-project/run_analysis.R', echo=TRUE)
data <- mergeDataSets (test, train)
cat (" Done.\n")
cat ("  Extracting mean and standard deviation related features...")
filteredFeatureNames <- replaceOffendingCharacters (filterFeatureNamesByMeanAndStd (featureNames))
data <- extractMeanStdMeasurements (data, filteredFeatureNames)
cat (" Done.\n")
cat ("  Replacing the activity ids by their corresponding labels...")
data <- replaceActivityIdByLabel (data, activityLabels, filteredFeatureNames)
cat (" Done.\n")
data <- assignDescriptiveVariableNames (data)
View(data)
colnames (data)
colnames (data) <- gsub ("\\.+", ".", colnames (data))
colnames (data)
source('Z:/Documents/Cursos/Coursera/Getting and Cleaning Data/Assignment/gacd-final-project/run_analysis.R', echo=TRUE)
data <- mergeDataSets (test, train)
cat (" Done.\n")
cat ("  Extracting mean and standard deviation related features...")
filteredFeatureNames <- replaceOffendingCharacters (filterFeatureNamesByMeanAndStd (featureNames))
data <- extractMeanStdMeasurements (data, filteredFeatureNames)
cat (" Done.\n")
cat ("  Replacing the activity ids by their corresponding labels...")
data <- replaceActivityIdByLabel (data, activityLabels, filteredFeatureNames)
cat (" Done.\n")
data <- assignDescriptiveVariableNames (data)
View(data)
data <- mergeDataSets (test, train)
cat (" Done.\n")
cat ("  Extracting mean and standard deviation related features...")
filteredFeatureNames <- replaceOffendingCharacters (filterFeatureNamesByMeanAndStd (featureNames))
data <- extractMeanStdMeasurements (data, filteredFeatureNames)
cat (" Done.\n")
cat ("  Replacing the activity ids by their corresponding labels...")
data <- replaceActivityIdByLabel (data, activityLabels, filteredFeatureNames)
cat (" Done.\n")
source('Z:/Documents/Cursos/Coursera/Getting and Cleaning Data/Assignment/gacd-final-project/run_analysis.R', echo=TRUE)
data <- assignDescriptiveVariableNames (data)
View(data)
colnames (Data)
colnames (data)
rm (list=ls ( ))
source('Z:/Documents/Cursos/Coursera/Getting and Cleaning Data/Assignment/gacd-final-project/run_analysis.R', echo=TRUE)
data <- runAnalysis ( )
View(data)
unique (data [ACTIVITY_LABEL_COL_NAME])
View(data)
?tapply
tapply (data$time.body.acceleration.mean.x, c (data$subject.id, data$subject$activity.label), sum)
tapply (data$time.body.acceleration.mean.x, c (data$subject.id, data$activity.label), sum)
tapply (data$time.body.acceleration.mean.x, data$subject.id, sum)
table
table ( )
?table
table (data$subject.id, data$activity.label)
group_by
library (plyr)
group_by
ddply
ddply (data, .(activity.label), numcolwise (mean))
foo <- ddply (data, .(activity.label), numcolwise (mean))
View(foo)
?ddply
foo <- ddply (data, .(subject.id, activity.label), numcolwise (mean))
View(foo)
foo <- ddply (data, c (SUBJECT_ID_COL_NAME, ACTIVITY_LABEL_COL_NAME), numcolwise (mean))
View(foo)
source('Z:/Documents/Cursos/Coursera/Getting and Cleaning Data/Assignment/gacd-final-project/run_analysis.R', echo=TRUE)
rm (list=ls ( ))
source('Z:/Documents/Cursos/Coursera/Getting and Cleaning Data/Assignment/gacd-final-project/run_analysis.R', echo=TRUE)
l <- runAnalysis ( )
l ["data"]
data <- l ["data"]
averageData <- l ["averageData"]
class (l)
class (l$data)
class (l$averageData)
data <- l$data
averageData <- l$averageData
View(averageData)
?write.table
write.table (data, file="data/data.txt")
View(data)
View(data)
rm (list=ls ( ))
source('Z:/Documents/Cursos/Coursera/Getting and Cleaning Data/Assignment/gacd-final-project/run_analysis.R', echo=TRUE)
l <- runAnalysis ( )
data <- l$data
averageData <- l$averageData
rm (list=ls ( ))
source('Z:/Documents/Cursos/Coursera/Getting and Cleaning Data/Assignment/gacd-final-project/run_analysis.R', echo=TRUE)
l <- runAnalysis
l <- runAnalysis ( )
featureNames <- getFeatureNames ( )
filteredFeatureNames <- replaceOffendingCharacters (filterFeatureNamesByMeanAndStd (featureNames))
filteredFeatureNames
data <- l$data
colnames (data)
class (data$subject.id)
class (data$activity.label)
unique (data$activity.label)
